{"version":3,"sources":["redux/reducers/authReducer.js","redux/reducers/chatReducer.js","redux/reducers/index.js","redux/types.js","store.js","App.js","index.js"],"names":["INITIAL_STATE","isLoggedIn","_id","token","data","combineReducers","auth","state","action","type","payload","chatRooms","_","mapKeys","omit","chatRoomId","messages","message","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","App","ReactDOM","render","document","querySelector"],"mappings":"qLAQMA,EAAgB,CACpBC,YAAY,EACZC,IAAK,KACLC,MAAO,KACPC,KAAM,I,gCCHFJ,EAAgB,GCJPK,cAAgB,CAC7BC,KFSa,WAAkC,IAAjCC,EAAgC,uDAA1BP,EAAeQ,EAAW,uCAC9C,OAAQA,EAAOC,MACb,IGTsB,aHctB,IGbkB,SHchB,OAAO,2BACFF,GACAC,EAAOE,SAEd,IGjBmB,UHkBjB,OAAO,2BACFH,GACAP,GAEP,IGrBuB,cHsBrB,OAAO,2BACFO,GADL,IAEEH,KAAK,2BACAG,EAAMH,MACNI,EAAOE,WAGhB,QACE,OAAOH,IElCXI,UDIa,WAAoC,IAAnCJ,EAAkC,uDAA1BP,EAAeQ,EAAW,uCAChD,OAAOA,EAAOC,MACZ,IEZwB,eFatB,OAAO,2BACFF,GADL,kBAEGC,EAAOE,QAAQR,IAFlB,eAGOM,EAAOE,WAGhB,IElB6B,oBFmB3B,OAAO,2BACFH,GACAK,IAAEC,QAAQL,EAAOE,QAAS,QAEjC,IEpBsB,aFqBpB,OAAO,2BACFH,GACAK,IAAEE,KAAKP,EAAOC,EAAOE,UAE5B,IE3BuB,cF4BrB,OAAO,2BACFH,GADL,kBAEGC,EAAOE,QAAQK,WAFlB,2BAGOR,EAAMC,EAAOE,QAAQK,aAH5B,IAIIC,SAAS,GAAD,mBACHT,EAAMC,EAAOE,QAAQK,YAAYC,UAD9B,CAENR,EAAOE,QAAQO,cAIvB,IErCyB,gBFsCvB,OAAO,2BACFV,GADL,kBAEGC,EAAOE,QAAQK,WAFlB,2BAGOR,EAAMC,EAAOE,QAAQK,aAH5B,IAIIC,SAAS,GAAD,mBACHT,EAAMC,EAAOE,QAAQK,YAAYC,UAD9B,YAEHR,EAAOE,QAAQM,eAI1B,IE1CmB,UF2CjB,OAAO,2BACFT,GACAP,GAEP,QACE,OAAOO,IClDXW,KAAMC,MEHFC,EAAmBC,OAAOC,sCAAwCC,IAC3DC,EAAQC,YACnBC,EACAN,EAAiBO,YAAgBC,OCNtBC,EAAM,WACjB,OACE,8CCGJC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,OAEFQ,SAASC,cAAc,W","file":"static/js/main.b30e403e.chunk.js","sourcesContent":["import {\r\n  CHECK_AUTH,\r\n  LOG_IN,\r\n  LOG_OUT,\r\n  UPDATE_USER\r\n} from '../types'\r\n\r\n// Do not modify\r\nconst INITIAL_STATE = {\r\n  isLoggedIn: false,\r\n  _id: null,\r\n  token: null,\r\n  data: {}\r\n}\r\n\r\nexport default (state=INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case CHECK_AUTH:\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    case LOG_IN:\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    case LOG_OUT:\r\n      return {\r\n        ...state,\r\n        ...INITIAL_STATE\r\n      };\r\n    case UPDATE_USER:\r\n      return {\r\n        ...state,\r\n        data: {\r\n          ...state.data,\r\n          ...action.payload\r\n        }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import _ from 'lodash'\r\nimport {\r\n  ADD_CHATROOM,\r\n  DISPLAY_CHATROOMS,\r\n  NEW_MESSAGE,\r\n  LOAD_MESSAGES,\r\n  CLOSE_CHAT, LOG_OUT\r\n} from '../types';\r\n\r\nconst INITIAL_STATE = [];\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch(action.type) {\r\n    case ADD_CHATROOM:\r\n      return {\r\n        ...state,\r\n        [action.payload._id]: {\r\n          ...action.payload\r\n        }\r\n      }\r\n    case DISPLAY_CHATROOMS:\r\n      return {\r\n        ...state,\r\n        ..._.mapKeys(action.payload, '_id')\r\n      }\r\n    case CLOSE_CHAT:\r\n      return {\r\n        ...state,\r\n        ..._.omit(state, action.payload)\r\n      }\r\n    case NEW_MESSAGE:\r\n      return {\r\n        ...state,\r\n        [action.payload.chatRoomId]: {\r\n          ...state[action.payload.chatRoomId],\r\n          messages: [\r\n            ...state[action.payload.chatRoomId].messages,\r\n            action.payload.message\r\n          ]\r\n        }\r\n      }\r\n    case LOAD_MESSAGES:\r\n      return {\r\n        ...state,\r\n        [action.payload.chatRoomId]: {\r\n          ...state[action.payload.chatRoomId],\r\n          messages: [\r\n            ...state[action.payload.chatRoomId].messages,\r\n            ...action.payload.messages\r\n          ]\r\n        }\r\n      }\r\n    case LOG_OUT:\r\n      return {\r\n        ...state,\r\n        ...INITIAL_STATE\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport authReducer from './authReducer';\r\nimport chatReducer from './chatReducer';\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  chatRooms: chatReducer,\r\n  form: formReducer\r\n});","// Chat Action Types\r\nexport const ADD_CHATROOM = 'ADD_CHATROOM';\r\nexport const DISPLAY_CHATROOMS = 'DISPLAY_CHATROOMS';\r\nexport const NEW_MESSAGE = 'NEW_MESSAGE';\r\nexport const LOAD_MESSAGES = 'LOAD_MESSAGES';\r\nexport const CLOSE_CHAT = 'CLOSE_CHAT';\r\n\r\n// Authorization Action Types\r\nexport const CHECK_AUTH = 'CHECK_AUTH';\r\nexport const LOG_IN = 'LOG_IN';\r\nexport const LOG_OUT = 'LOG_OUT';\r\nexport const UPDATE_USER = 'UPDATE_USER';","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport reduxThunk from 'redux-thunk';\r\nimport reducers from './redux/reducers';\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(reduxThunk))\r\n);","import React from 'react';\r\n\r\nexport const App = () => {\r\n  return(\r\n    <h1> Hello World </h1>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\nimport {App} from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}